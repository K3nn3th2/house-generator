#include "renderer.h"


// The constructor initialises GLFW, GLEW and the shader program. 
// It also sets up a GLFW window, assigns the context and sets OpenGL flags.
Renderer::Renderer(float x, float y, float z, float fov){
    // Initialize GLFW
    glfwInit();
    // Create a window
    window = glfwCreateWindow(WIDTH, HEIGHT, "Parametric House Generator", nullptr, nullptr);
    // make window the current context
    glfwMakeContextCurrent(window);
    // Initialize GLEW
    glewInit();
    // Initialize shader program
    shader = Shader("vertexShader.vert", "fragmentShader.frag", "geometryShader.geom");
    shader.use();

    // set OpenGL Flags 
    glEnable(GL_CLIP_PLANE0);
    glEnable(GL_DEPTH_TEST);
    glEnable(GLU_CULLING);

    camera = Camera(glm::vec3(x, y, z));
    
    mat_projection = glm::perspective(glm::radians(fov), (float)WIDTH / (float)HEIGHT, 1.0f, 150.0f);
    
}

// sets uniform variables for each of the houses to be generated by the geometry shader and draws them.
void Renderer::render(std::vector<House> &houses){

   glm::mat4 mat_view = camera.GetViewMatrix();;
   glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

   shader.setFloat("u_height_clip", height_clip);
   for(House house : houses){
      shader.setFloat("u_width", house.width);
      shader.setFloat("u_length", house.length);
      shader.setFloat("u_height_wall", house.height_wall);
      shader.setFloat("u_height_roof", house.height_roof);
      shader.setVec3("u_colour_roof", house.colour_roof_r, house.colour_roof_g, house.colour_roof_b);
      shader.setVec3("u_colour_wall", house.colour_wall_r, house.colour_wall_g, house.colour_wall_b);
      shader.setVec4("u_location", house.pos_x, house.pos_y, house.pos_z, 1.0);
      shader.setMat4("u_mvp", mat_projection * mat_view * house.mat_model);
      shader.setMat4("u_rotation", house.mat_rotation);
      glDrawArrays(GL_POINTS, 0, 10);
   }
    glfwSwapBuffers(window);
    glfwPollEvents();
}

// destroys window and terminates GLFW
void Renderer::terminate(){
    glfwDestroyWindow(window);
    glfwTerminate();

}
